generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          String     @id
  clerkId     String     @unique
  username    String     @unique
  fullname    String
  email       String     @unique
  photo       String?
  points      Int        @default(0)
  bio         String?    @default("Your friendly neighborhood user")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  lastLoginAt DateTime?
  provider    String?
  providerId  String?
  role        Role       @default(user)
  bookmarks   Bookmark[]
  comments    Comment[]
  following   Follow[]   @relation("UserFollowing")
  followers   Follow[]   @relation("UserFollowers")
  likes       Like[]
  posts       Post[]
  reviews     Review[]
  readlist    Readlist[]
  roadmaps    Roadmap[]
}

model Post {
  id              String     @id @default(cuid())
  userId          String
  comicId         String?    // If null = global post, if not null = thought in book club
  title           String?    // Optional for thoughts (they might not need titles)
  content         String
  attachments     String[]   @default([]) // Array for image URLs (max 4 for thoughts)
  hasSpoiler      Boolean    @default(false) // For thoughts in book clubs
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  isDraft         Boolean    @default(false)
  
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  comic           Comic?     @relation(fields: [comicId], references: [id], onDelete: Cascade)
  bookmarks       Bookmark[]
  comments        Comment[]
  likes           Like[]

  @@index([comicId]) // For efficient book club queries
  @@index([createdAt])
  @@index([hasSpoiler])
}

model Comment {
  id         String   @id @default(cuid())
  userId     String
  postId     String?
  reviewId   String?
  roadmapId  String?
  content    String
  attachment String?
  replyTo    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  post       Post?     @relation(fields: [postId], references: [id], onDelete: Cascade)
  review     Review?   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  roadmap    Roadmap?  @relation(fields: [roadmapId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes      Like[]
  
  // Self-referential relations
  parentComment Comment? @relation("CommentReplies", fields: [replyTo], references: [id], onDelete: Cascade)
  replies       Comment[] @relation("CommentReplies")
}

model Like {
  id        String    @id @default(cuid())
  userId    String
  postId    String?
  commentId String?
  reviewId  String?
  roadmapId String?
  createdAt DateTime  @default(now())
  comment   Comment?  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  post      Post?     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  review    Review?   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  roadmap   Roadmap?   @relation(fields: [roadmapId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@unique([userId, commentId])
  @@unique([userId, reviewId])
  @@unique([userId, roadmapId])
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
}

model Comic {
  id                 String   @id @default(cuid())
  name               String
  publisher          String
  authors            String[]
  characters         String[]
  numberOfIssues     Int
  image              String?
  isBeginnerFriendly Boolean  @default(false)
  readingLinks       String[]
  totalReviews       Int      @default(0)
  averageRating      Float?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  description        String?
  ongoing            Boolean  @default(false)
  isIndie            Boolean  @default(false)
  isGraphicNovel     Boolean  @default(false)
  reviews            Review[]
  readlist           Readlist[]
  readingLinksData   ReadingLink[]
  thoughts           Post[]   // Posts with comicId are thoughts
  roadmapEntry       RoadmapEntry[]

  @@index([publisher])
  @@index([isBeginnerFriendly])
  @@index([averageRating])
}

model Review {
  id          String   @id @default(cuid())
  userId      String
  comicId     String
  rating      Float
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  spoiler     Boolean  @default(false)
  comic       Comic    @relation(fields: [comicId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes       Like[]
  comments    Comment[]


  @@unique([userId, comicId])
  @@index([comicId])
  @@index([rating])
}

model Bookmark {
  id            String      @id @default(cuid())
  postId        String
  userId        String
  createdAt     DateTime    @default(now())
  post          Post        @relation(fields: [postId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
}

model Readlist {
  id          String      @id @default(cuid())
  userId      String
  comicId     String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  comic       Comic       @relation(fields: [comicId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, comicId])
}

model ReadingLink {
  id              String   @id @default(cuid())
  comicId         String
  url             String
  translatorName  String
  language        String   @default("en")
  color           String   @default("orange")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  comic Comic @relation(fields: [comicId], references: [id], onDelete: Cascade)
}

model Roadmap {
  id          String    @id @default(cuid())
  title       String
  description String?
  createdBy   String    // user ID
  isPublic    Boolean   @default(false)
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  entries     RoadmapEntry[]
  creator     User      @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  likes       Like[]
  comments    Comment[]
  
  @@index([createdBy])
  @@index([isPublic])
}

model RoadmapEntry {
  id          String   @id @default(cuid())
  roadmapId   String
  order       Int
  title       String   // e.g., "Essential Spider-Man Origins"
  description String?  // User's explanation for this entry
  
  // Comic fields - now directly on the entry since it's one-to-one
  comicId        String? // For local comics
  externalId     String? // Comic Vine ID
  externalSource String? // "comicvine"
  comicName      String
  publisher      String?
  image          String?
  issueNumber    String?
  comicDescription String?
  
  roadmap Roadmap @relation(fields: [roadmapId], references: [id], onDelete: Cascade)
  comic   Comic?  @relation(fields: [comicId], references: [id])
  
  @@unique([roadmapId, order])
  @@index([roadmapId])
  @@index([comicId])
}

enum Role {
  owner
  admin
  content_creator
  translator
  seller
  user
}

enum PostType {
  post
  draft
  thought
}