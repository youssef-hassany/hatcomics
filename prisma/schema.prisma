generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id         String    @id @default(cuid())
  clerkId    String    @unique
  username   String    @unique
  fullname   String
  email      String    @unique
  photo      String?
  points     Int       @default(0)
  bio        String?   @default("Your friendly neighborhood user")
  posts      Post[]
  comments   Comment[]
  likes      Like[]
  followers  Follow[]  @relation("UserFollowers")
  following  Follow[]  @relation("UserFollowing")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  provider     String?   // "google", "facebook", "twitter"
  providerId   String?   // Their ID on that platform
  lastLoginAt  DateTime?
}

model Post {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  title         String
  content       String
  comments      Comment[]
  likes         Like[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Comment {
  id            String    @id @default(cuid())
  userId        String
  postId        String
  user          User      @relation(fields: [userId], references: [id])
  post          Post      @relation(fields: [postId], references: [id])
  content       String
  attachment    String?
  likes         Like[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Like {
  id          String   @id @default(cuid())
  userId      String
  postId      String?  // Nullable to allow liking either post or comment
  commentId   String?  // Nullable to allow liking either post or comment
  user        User     @relation(fields: [userId], references: [id])
  post        Post?    @relation(fields: [postId], references: [id])
  comment     Comment? @relation(fields: [commentId], references: [id])
  createdAt   DateTime @default(now())

  @@unique([userId, postId])
  @@unique([userId, commentId])
}

model Follow {
  id           String   @id @default(cuid())
  followerId   String
  followingId  String
  follower     User     @relation("UserFollowing", fields: [followerId], references: [id])
  following    User     @relation("UserFollowers", fields: [followingId], references: [id])
  createdAt    DateTime @default(now())

  @@unique([followerId, followingId])
}
